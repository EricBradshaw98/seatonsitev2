// users.js
const express = require('express');
const multer = require('multer');
const path = require('path');
const photos = express.Router(); // create an Express router
const db = require('../db/db.js'); // Adjust the path as necessary
const fs = require('fs').promises;
const sharp = require('sharp');



// Define storage for multer
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    // Save files to the 'frontend/public/photos' folder
    cb(null, path.join('/home/labber/seatonsitev2/frontend/public/galleryphotos'));
  },
  filename: function (req, file, cb) {
    // Generate unique filename for each uploaded file
    cb(null, `${Date.now()}-${file.originalname}`);
  },
});

const upload = multer({ storage: storage });


photos.get('/', async (req, res) => {
  try {
    const result = await db.query('SELECT * FROM photos');
    res.json(result.rows);
  } catch (err) {
    console.error(err);
    res.status(500).send('Internal Server Error');
  }
});

photos.get('/:gallery_id', async (req, res) => {
  const galleryId = req.params.gallery_id;
  try {
    const query = 'SELECT * FROM photos WHERE gallery_id = $1';
    const result = await db.query(query, [galleryId]);
    res.json(result.rows);
  } catch (err) {
    console.error(err);
    res.status(500).send('Internal Server Error');
  }
});

photos.post('/upload', upload.array('files'), async (req, res) => {
  try {
    console.log('Received Data:', req.body); // Log the request body
    console.log('Received Files:', req.files); // Log the uploaded files

    const { user_id, galleryId, description, newGallery } = req.body; // Adjust the field names to match the frontend
    if (newGallery) {
      const galleryQuery = `
        INSERT INTO galleries (name, description, user_id, image, active, created_at, updated_at)
        VALUES ($1, $2, $3, $4, $5, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
        RETURNING *;
      `;
      const galleryValues = [
        newGallery.name,
        newGallery.description,
        user_id,
        newGallery.image,
        true, // Assuming the new gallery is active by default
      ];
      const newGalleryResult = await db.query(galleryQuery, galleryValues);
      const newGalleryId = newGalleryResult.rows[0].id; // Assuming the id is generated by the database
      console.log('New gallery created:', newGalleryId);
    }


    const insertedPhotos = await Promise.all(req.files.map(async (file) => {
      const { filename, originalname } = file; // Destructure filename and originalname

      try {
        // Save the image to the uploads directory
        
      
        const url = `${filename}`; // Adjust the URL as needed
      
        // Insert the image data into the photos table
        const query = `
          INSERT INTO photos (name, user_id, gallery_id, url, description, created_at, updated_at)
          VALUES ($1, $2, $3, $4, $5, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
          RETURNING *;
        `;
        const values = [originalname, user_id, galleryId, url, description]; // Adjust the parameter order to match the query
        const result = await db.query(query, values);
        return result.rows[0];
      } finally {
        // Release the client back to the pool
      }
    }));

    res.json({ message: 'Images uploaded successfully', photos: insertedPhotos });
  } catch (error) {
    console.error('Error uploading images:', error);
    res.status(500).json({ error: 'Failed to upload images' });
  }
});


module.exports = photos;